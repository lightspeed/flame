const fs = require('fs');
const Svgo = require('svgo');
const { argv } = require('yargs');

const svgDirPath = `./svg/Icons/`;

const svgoconfig = {
  multipass: true,
  plugins: [
    { cleanupAttrs: true },
    { cleanupEnableBackground: true },
    { cleanupListOfValues: true },
    { cleanupIDs: false },
    { cleanupNumericValues: true },
    { collapseGroups: true },
    { convertStyleToAttrs: true },
    { convertTransform: true },
    { mergePaths: true },
    { minifyStyles: true },
    { removeDimensions: true },
    { removeComments: true },
    { removeDesc: { removeAny: true } },
    { removeDoctype: true },
    { removeEditorsNSData: true },
    { removeEmptyAttrs: true },
    { removeEmptyContainers: true },
    { removeEmptyText: true },
    { removeMetadata: true },
    { removeNonInheritableGroupAttrs: true },
    { removeTitle: true },
    { removeUnknownsAndDefaults: true },
    { removeUnusedNS: true },
    { removeUselessDefs: true },
    { removeUselessStrokeAndFill: true },
    { removeXMLProcInst: true },
    { sortAttrs: true },
    { removeAttrs: { attrs: 'fill' } },
  ],
};

const flameIcon = {
  flameIcon: {
    type: 'perItemReverse', // full, perItem, perItemReverse
    description: 'For generating Lightspeed Flame icons',
    params: {}, // I don't know. whatever man
    fn(item) {
      // add the default attributes to `details-1` and `details-2`
      if (
        (item.isElem('path') ||
          item.isElem('rect') ||
          item.isElem('circle') ||
          item.isElem('polygon') ||
          item.isElem('ellipse')) &&
        item.hasAttr('id')
      ) {
        if (item.attr('id').value === 'details-1') {
          item.addAttr({ local: 'fill', prefix: '', name: 'fill', value: 'none' });
        }
        if (item.attr('id').value === 'details-2') {
          item.addAttr({ local: 'fill', prefix: '', name: 'fill', value: '#fff' });
        }
      }

      // collapse the group called Symbols, auto-generated by Sketch
      if (item.isElem('g') && item.hasAttr('id')) {
        if (/^symbols/i.test(item.attr('id').value)) {
          item.removeAttr('fill-rule');
          item.removeAttr('clip-rule');
          item.removeAttr('id');
        }
      }
      return item;
    },
  },
};

svgoconfig.plugins.push(flameIcon);

const svgoInstance = new Svgo(svgoconfig);
const singleFile = argv.single;

function svgoOptimize(file) {
  return fs.readFile(file, 'utf8', (moduleErr, svg) => {
    svgoInstance.optimize(
      svg,
      res => {
        fs.writeFile(file, res.data, () => {});
      },
      () => {},
    );
  });
}

fs.readdir(
  svgDirPath,
  (err, svgPaths) => {
    const fullSvgPaths = svgPaths
      .filter(svgPath => /icon-.+?\.svg/.test(svgPath) && svgDirPath + svgPath)
      .map(svgPath => svgDirPath + svgPath);

    if (singleFile) {
      svgoOptimize(singleFile);
    } else {
      fullSvgPaths.forEach(singleSvgPath => {
        svgoOptimize(singleSvgPath);
      });
    }
  },
  () => {},
);
